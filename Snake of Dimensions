#include <iostream>
#include <conio.h>
#include <ctime>
#include <windows.h>
using namespace std;

// Inisialisasi variabel global
const int lebar = 60;
const int tinggi = 20;
const int ekorMaks = 100;
bool selesai;
int skor = 0;
int jedaGame = 500;
string modeGame = "Normal";
int levelGame = 1;

enum Arah { DIAM = 0, KIRI, KANAN, ATAS, BAWAH };
Arah arah;

// Struct Titik dengan method tambahan
struct Titik {
    int x, y;
    
    // Method untuk membandingkan dua titik menggunakan pointer
    bool samaDengan(const Titik* other) const {
        return x == other->x && y == other->y;
    }
    
    // Method untuk menyalin dari titik lain menggunakan pointer
    void salinDari(const Titik* source) {
        x = source->x;
        y = source->y;
    }
};

// Struct untuk menyimpan state game dengan pointer
struct GameState {
    Titik* kepalaPtr;
    Titik* makananPtr;
    Titik* ekorPtr;
    int* jumlahEkorPtr;
    int* skorPtr;
    bool* selesaiPtr;
    Arah* arahPtr;
};

Titik kepala, makanan;
Titik ekor[ekorMaks];
int jumlahEkor;

// Deklarasi fungsi dengan parameter pointer
void garisMenu();
void ketikTengah(string teks, int lebar);
void tengah(string teks);
void tampilkanMenu(string teks, int noMenu, int pil);
int ambilTombol();
void logo();
void mulai();
void buatMakanan(GameState* gameState);
void awalGame(GameState* gameState);
void displayGame(GameState* gameState);
void input(GameState* gameState);
void gerakUlar(GameState* gameState);
void akhirGame(GameState* gameState);

int main() {
    do {
        selesai = false;  
        mulai();
        if (selesai) break;
        GameState gameState;
        gameState.kepalaPtr = &kepala;
        gameState.makananPtr = &makanan;
        gameState.ekorPtr = ekor;
        gameState.jumlahEkorPtr = &jumlahEkor;
        gameState.skorPtr = &skor;
        gameState.selesaiPtr = &selesai;
        gameState.arahPtr = &arah;

        awalGame(&gameState);

        while (!selesai) {
            displayGame(&gameState);
            input(&gameState);
            gerakUlar(&gameState);
            Sleep(jedaGame);
        }

        akhirGame(&gameState);
    } while (!selesai);

    return 0;
}

void garisMenu() {
    for (int i = 0; i <= lebar; i++) cout << "\033[34m" << "=" << "\033[0m";
    cout << "\n";
}

void ketikTengah(string teks, int lebar) {
    int spasi = (lebar - (int)teks.length()) / 2;
    cout << string(spasi, ' ');
    for (char c : teks) {
        cout << c;
        for (long long i = 0; i < 1000000; i++);
    }
    cout << endl;
}

void tengah(string teks) {
    int spasi = (lebar - teks.length()) / 2;
    cout << string(spasi, ' ') << teks << endl;
}

void tampilkanMenu(string teks, int noMenu, int pil) {
    for (int i = 0; i <= lebar-10; i++) {
        if (i == (lebar - (int)teks.length())/2) {
            if (pil == noMenu) cout << "\033[35m" << teks << "\033[0m";
            else cout << teks;
        } else {
            cout << " ";
        }
    } cout << endl;
}

int ambilTombol() {
    int tombol = _getch();
    if (tombol == 0 || tombol == 224)
        tombol = _getch();
    return tombol;
}

void logo() {
    system("cls");
    garisMenu();
    cout << "\033[32m" << R"(
   '        /^\/^\
          _|__|  O|     +
 \/     /~     \_/ \
  \____|__________/  \
         \_______      \
                 `\     \    '            \
                   |     |                  \
                  /      /           +        \
    +            /     /                       \\
               /      /                         \ \
              /     /                            \  \ '
       '    /     /             _----_            \   \
           /     /           _-~      ~-_         |   |
          (      (        _-~    _--_    ~-_     _/   |
           \      ~-____-~    _-~    ~-_    ~-_-~    /    +
    +       ~-_           _-~          ~-_       _-~
                ~--______-~                ~-___-~
    )" << "\033[0m" << endl;
    ketikTengah("+  SNAKE OF DIMENSIONS  +", lebar);
    garisMenu();
}

void mulai() {
    int pilihan = 1;
    bool selesaiMenu = false;
    while (!selesaiMenu) {
        system("cls");
        logo();
        garisMenu();
        cout << endl;
        tampilkanMenu(" Mode Game: " + modeGame, 1, pilihan);
        tampilkanMenu(" Level Game: " + to_string(levelGame), 2, pilihan);
        tampilkanMenu(" Mulai Game", 3, pilihan);
        tampilkanMenu(" Petunjuk Permainan", 4, pilihan);
        tampilkanMenu(" Keluar", 5, pilihan);
        cout << endl;
        garisMenu();

        int tombol = ambilTombol();
        switch (tombol) {
            case 72: case 'w': case 'W': if (pilihan > 1) pilihan--; break;
            case 80: case 's': case 'S': if (pilihan < 5) pilihan++; break;
            case 75:
                if (pilihan == 1)
                    modeGame = (modeGame == "Normal") ? "Hard" : "Normal";
                else if (pilihan == 2 && levelGame > 1)
                    levelGame--;
                break;
            case 77:
                if (pilihan == 1)
                    modeGame = (modeGame == "Normal") ? "Hard" : "Normal";
                else if (pilihan == 2 && levelGame < 10)
                    levelGame++;
                break;
            case 13:
                if (pilihan == 3) selesaiMenu = true;
                else if (pilihan == 4) {
                    system("cls");
                    garisMenu();
                    ketikTengah("Petunjuk Permainan", lebar);
                    garisMenu();
                    cout << "\n  - Gunakan panah atau WASD untuk menggerakkan ular.\n";
                    cout << "  - Makan makanan (@) untuk menambah skor dan panjang tubuh ular.\n";
                    cout << "  - Hindari menabrak tubuh sendiri.\n";
                    cout << "  - klik tombol panah kanan untuk mengubah mode dan level.\n";
                    cout << "  - Semakin tinggi level, semakin cepat pergerakan ular.\n";
                    cout << "  - Mode Hard tidak boleh menabrak dinding.\n";
                    cout << "\n  Tekan tombol apa saja untuk kembali...";
                    _getch();
                } else if (pilihan == 5) {
                    selesai = true;
                    selesaiMenu = true;
                }
                break;
        }
    }
}

void buatMakanan(GameState* gameState) {
    bool valid;
    do {
        valid = true;
        gameState->makananPtr->x = rand() % lebar;
        gameState->makananPtr->y = rand() % tinggi;
        
        if (gameState->makananPtr->samaDengan(gameState->kepalaPtr)) valid = false;
        
        for (int i = 0; i < *gameState->jumlahEkorPtr; i++) {
            if (gameState->ekorPtr[i].samaDengan(gameState->makananPtr)) {
                valid = false;
                break;
            }
        }
    } while (!valid);
}

void awalGame(GameState* gameState) {
    *gameState->selesaiPtr = false;
    *gameState->arahPtr = KANAN;
    gameState->kepalaPtr->x = lebar / 2;
    gameState->kepalaPtr->y = tinggi / 2;
    *gameState->jumlahEkorPtr = 0;
    *gameState->skorPtr = 0;
    
    if (modeGame == "Hard") {
        jedaGame = 130;
    } else {
        jedaGame = 200;
    }
    jedaGame -= (levelGame * 20);
    
    buatMakanan(gameState);
}

void displayGame(GameState* gameState) {
    system("cls");
    for (int vertikal = 0; vertikal < lebar + 2; vertikal++) 
        cout << "\033[34m#\033[0m";
    cout << endl;

    for (int vertikal = 0; vertikal < tinggi; vertikal++) {
        for (int horizontal = 0; horizontal < lebar; horizontal++) {
            if (horizontal == 0) cout << "\033[34m#\033[0m";

            if (vertikal == gameState->kepalaPtr->y && horizontal == gameState->kepalaPtr->x) {
                cout << "\033[31mO\033[0m";
            }
            else if (vertikal == gameState->makananPtr->y && horizontal == gameState->makananPtr->x) {
                cout << "\033[1;33m@\033[0m";
            }
            else {
                bool cetakEkor = false;
                for (int k = 0; k < *gameState->jumlahEkorPtr; k++) {
                    if (gameState->ekorPtr[k].x == horizontal && gameState->ekorPtr[k].y == vertikal) {
                        cout << "\033[31mo\033[0m";
                        cetakEkor = true;
                        break;
                    }
                } 
                if (!cetakEkor) cout << " ";
            } 
            if (horizontal == lebar - 1) cout << "\033[34m#\033[0m";
        } 
        cout << endl;
    }
    
    for (int vertikal = 0; vertikal < lebar + 2; vertikal++) 
        cout << "\033[34m#\033[0m";
    cout << endl;
    
    cout << "Skor: " << *gameState->skorPtr << "\n";
    cout << "Kontrol: Panah / WASD | Tekan 'x' untuk keluar\n";
}

void input(GameState* gameState) {
    if (_kbhit()) {
        int tombol = ambilTombol();
        switch (tombol) {
            case 72: case 'w': case 'W':
                if (*gameState->arahPtr != BAWAH) *gameState->arahPtr = ATAS;
                break;
            case 80: case 's': case 'S':
                if (*gameState->arahPtr != ATAS) *gameState->arahPtr = BAWAH;
                break;
            case 75: case 'a': case 'A':
                if (*gameState->arahPtr != KANAN) *gameState->arahPtr = KIRI;
                break;
            case 77: case 'd': case 'D':
                if (*gameState->arahPtr != KIRI) *gameState->arahPtr = KANAN;
                break;
            case 'x': case 'X':
                *gameState->selesaiPtr = true;
                break;
        }
    }
}

void gerakUlar(GameState* gameState) {
    if (*gameState->jumlahEkorPtr > 0) {
        for (int i = *gameState->jumlahEkorPtr - 1; i > 0; i--) {
            Titik* ekorNow = &gameState->ekorPtr[i];
            Titik* ekorRev = &gameState->ekorPtr[i - 1];
            ekorNow->salinDari(ekorRev);
        }
        gameState->ekorPtr[0].salinDari(gameState->kepalaPtr);
    }
    
    switch (*gameState->arahPtr) {
        case KIRI: gameState->kepalaPtr->x--; break;
        case KANAN: gameState->kepalaPtr->x++; break;
        case ATAS: gameState->kepalaPtr->y--; break;
        case BAWAH: gameState->kepalaPtr->y++; break;
        default: break;
    }
    
    if (modeGame == "Normal") {
        if (gameState->kepalaPtr->x < 0) gameState->kepalaPtr->x = lebar - 1;
        else if (gameState->kepalaPtr->x >= lebar) gameState->kepalaPtr->x = 0;

        if (gameState->kepalaPtr->y < 0) gameState->kepalaPtr->y = tinggi - 1;
        else if (gameState->kepalaPtr->y >= tinggi) gameState->kepalaPtr->y = 0;
    } 
    else if (modeGame == "Hard") {
        if (gameState->kepalaPtr->x < 0 || gameState->kepalaPtr->x >= lebar || 
            gameState->kepalaPtr->y < 0 || gameState->kepalaPtr->y >= tinggi) {
            cout << "Yah pusing deh, kamu menabrak dinding\n";
            *gameState->selesaiPtr = true;
        }
    }
    
    for (int i = 0; i < *gameState->jumlahEkorPtr; i++) {
        if (gameState->ekorPtr[i].samaDengan(gameState->kepalaPtr)) {
            cout << "Yah kasihan deh, kamu menabrak tubuh sendiri\n";
            *gameState->selesaiPtr = true;
        }
    }
    
    if (gameState->kepalaPtr->samaDengan(gameState->makananPtr)) {
        *gameState->skorPtr += 10;
        Beep(1000, 100);
        if (*gameState->jumlahEkorPtr < ekorMaks) (*gameState->jumlahEkorPtr)++;
        buatMakanan(gameState);
    }
}

void akhirGame(GameState* gameState) {
    int pilihan = 1;
    bool selesaiAkhir = false;
    while (!selesaiAkhir) {
        system("cls");
        garisMenu();
        cout << "\033[1;31m";
        ketikTengah("+  GAME OVER  +", lebar);
        cout << "\033[0m";
        garisMenu();
        cout << "\n";
        tengah("Skor Akhir: " + to_string(*gameState->skorPtr));
        tengah("Woww! Permainan yang keren\n\n");
        garisMenu();
        cout << "\n";
        tampilkanMenu(" Main Lagi", 1, pilihan);
        tampilkanMenu(" Keluar", 2, pilihan);
        cout << "\n";
        garisMenu();

        int tombol = ambilTombol();
        switch (tombol) {
            case 72: case 'w': case 'W': if (pilihan > 1) pilihan--; break;
            case 80: case 's': case 'S': if (pilihan < 3) pilihan++; break;
            case 13:
                if (pilihan == 1) {
                    awalGame(gameState);
                    selesaiAkhir = true;
                } else if (pilihan == 2) {
                    *gameState->selesaiPtr = true;
                    cout << "Terima kasih sudah bermain!\n\n";
                    selesaiAkhir = true;
                }
                break;
        }
    }
}
