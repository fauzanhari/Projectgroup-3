#include <iostream>
#include <conio.h>
#include <ctime>
#include <windows.h>
using namespace std;

// Inisialisasi variabel global
const int lebar = 60;
const int tinggi = 20;
const int ekorMaks = 100;
bool selesai;
int skor = 0;
int jedaGame ;
string modeGame = "Normal";
int levelGame = 1;

enum Arah { DIAM = 0, KIRI, KANAN, ATAS, BAWAH };
Arah arah;

// Struct Titik dengan method tambahan
struct Titik {
    int x, y;
    
    // Method untuk membandingkan dua titik menggunakan pointer
    bool samaDengan(const Titik* banding) const {
        return x == banding->x && y == banding->y;
    }
    
    // Method untuk menyalin dari titik lain menggunakan pointer
    void salinDari(const Titik* asal) {
        x = asal->x;
        y = asal->y;
    }
};

struct dataGame {
    Titik* kepalaPtr;
    Titik* makananPtr;
    Titik* ekorPtr;
    int* jumlahEkorPtr;
    int* skorPtr;
    bool* selesaiPtr;
    Arah* arahPtr;
};

Titik kepala, makanan;
Titik ekor[ekorMaks];
int jumlahEkor;

// Deklarasi fungsi dengan parameter pointer
void garisMenu();
void tengah(string teks);
int ambilTombol();
void logo();
void mulai();
void buatMakanan(dataGame* statusGame);
void awalGame(dataGame* statusGame);
void displayGame(dataGame* statusGame);
void input(dataGame* statusGame);
void gerakUlar(dataGame* statusGame);
void akhirGame(dataGame* statusGame);
void tampilkanMenulvl(string teks, int level ,int noMenu, int pil);
void tampilkanMenuteks(string teks,int noMenu, int pil);

int main() {
    do {
        selesai = false;  
        mulai();
        if (selesai) break;
        dataGame statusGame;
        statusGame.kepalaPtr = &kepala;
        statusGame.makananPtr = &makanan;
        statusGame.ekorPtr = &ekor[0];
        statusGame.jumlahEkorPtr = &jumlahEkor;
        statusGame.skorPtr = &skor;
        statusGame.selesaiPtr = &selesai;
        statusGame.arahPtr = &arah;

        awalGame(&statusGame);

        while (!selesai) {
            displayGame(&statusGame);
            input(&statusGame);
            gerakUlar(&statusGame);
            Sleep(jedaGame);
        }
        system("pause");
        akhirGame(&statusGame);
    } while (!selesai);

    return 0;
}
void tengah(string teks) {
    int panjang = teks.length();
    cout << "|";
    for (int i = 0; i <= (lebar-1) - panjang; i++)
    {
        if (i == lebar/2 - panjang / 2)
            cout << teks;
        else
            cout <<" ";
    }
    cout << "|" << endl;
}
void garisMenu() {
    for (int i = 0; i <= lebar; i++) cout << "\033[34m" << "=" << "\033[0m";
    cout << "\n";
}
void tampilkanMenulvl(string teks, int level ,int noMenu, int pil) {
    int panjang = teks.length();
    cout << "|";
    for (int i = 0; i <= lebar-panjang-2; i++) {
        if (i == (lebar - (int)teks.length())/2) {
            if (pil == noMenu) cout << "\033[35m" << teks <<level<< "\033[0m";
            else cout << teks<<level;
        } else {
            cout << " ";
        }
    } cout << "|" << endl;
}
void tampilkanMenuteks(string teks,int noMenu, int pil) {
    int panjang = teks.length();
    cout << "|";
    for (int i = 0; i <= lebar-panjang-1; i++) {
        if (i == (lebar - (int)teks.length())/2) {
            if (pil == noMenu) cout << "\033[35m" << teks << "\033[0m";
            else cout << teks;
        } else {
            cout << " ";
        }
    } cout << "|" << endl;
}
int ambilTombol() { //biar ga delay buat panah
    int tombol = _getch();
    if (tombol == 0 || tombol == 224)
        tombol = _getch();
    return tombol;
}
void logo() {
    system("cls");
    garisMenu();
    tengah("+  WELCOME TO SNAKE OF DIMENSIONS  +");
    garisMenu();
    cout << "\033[32m" << R"(|                                                           |
|   '        /^\/^\                                         |
|          _|__|  O|     +                                  |
| \/     /~     \_/ \                                       |
|  \____|__________/  \                                     |
|         \_______      \                                   |
|                 `\     \    '            \                |
|                   |     |                  \              |
|                  /      /           +        \            |
|    +            /     /                       \\          |
|               /      /                         \ \        |
|              /     /                            \  \ '    |
|       '    /     /             _----_            \   \    |
|           /     /           _-~      ~-_         |   |    |
|          (      (        _-~    _--_    ~-_     _/   |    |
|           \      ~-____-~    _-~    ~-_    ~-_-~    /    +|
|    +       ~-_           _-~          ~-_       _-~       |
|                 ~--______-~                ~-___-~        |
|                                                           |)" << "\033[0m" << endl;
    garisMenu();
    tengah("+  PROJECT BY GROUP 3  +");
    garisMenu();
}
void mulai() {
    int pilihan = 1;
    bool selesaiMenu = false;
    while (!selesaiMenu) {
        system("cls");
        logo();
        tampilkanMenuteks(" Mulai Game", 1, pilihan);
        tampilkanMenulvl(" Level Game: " ,levelGame, 2, pilihan);
        tampilkanMenuteks(" Mode Game: " + modeGame, 3, pilihan);
        tampilkanMenuteks(" Petunjuk Permainan", 4, pilihan);
        tampilkanMenuteks(" Keluar", 5, pilihan);
        garisMenu();

        int tombol = ambilTombol();
        switch (tombol) {
            case 72: case 'w': case 'W': if (pilihan > 1) pilihan--; break;
            case 80: case 's': case 'S': if (pilihan < 5) pilihan++; break;
            case 75:
                if (pilihan == 3)
                    modeGame = (modeGame == "Normal") ? "Hard" : "Normal";
                else if (pilihan == 2 && levelGame > 1)
                    levelGame--;
                break;
            case 77:
                if (pilihan == 3)
                    modeGame = (modeGame == "Normal") ? "Hard" : "Normal";
                else if (pilihan == 2 && levelGame < 5)
                    levelGame++;
                break;
            case 13:
                if (pilihan == 1) selesaiMenu = true;
                else if (pilihan == 4) {
                    system("cls");
                    garisMenu();
                    tengah("Petunjuk Permainan");
                    garisMenu();
                    cout << "\n  - Gunakan panah atau WASD untuk menggerakkan ular.\n";
                    cout << "  - Makan makanan (@) untuk menambah skor dan panjang tubuh ular.\n";
                    cout << "  - Hindari menabrak tubuh sendiri.\n";
                    cout << "  - klik tombol panah kanan untuk mengubah mode dan level.\n";
                    cout << "  - Semakin tinggi level, semakin cepat pergerakan ular.\n";
                    cout << "  - Mode Hard tidak boleh menabrak dinding.\n";
                    cout << "\n  Tekan tombol apa saja untuk kembali...";
                    _getch();
                } else if (pilihan == 5) {
                    selesai = true;
                    selesaiMenu = true;
                }
                break;
        }
    }
}
void buatMakanan(dataGame* statusGame) {
    bool valid;
    do {
        valid = true;
        statusGame->makananPtr->x = rand() % lebar;
        statusGame->makananPtr->y = rand() % tinggi;
        
        if (statusGame->makananPtr->samaDengan(statusGame->kepalaPtr)) valid = false;
        
        for (int i = 0; i < *statusGame->jumlahEkorPtr; i++) {
            if (statusGame->ekorPtr[i].samaDengan(statusGame->makananPtr)) {
                valid = false;
                break;
            }
        }
    } while (!valid);
}
void awalGame(dataGame* statusGame) {
    *statusGame->selesaiPtr = false;
    *statusGame->arahPtr = KANAN;
    statusGame->kepalaPtr->x = lebar / 2;
    statusGame->kepalaPtr->y = tinggi / 2;
    *statusGame->jumlahEkorPtr = 0;
    *statusGame->skorPtr = 0;
    
    if (modeGame == "Hard") {
        jedaGame = 130;
    } else {
        jedaGame = 200;
    }
    jedaGame -= (levelGame * 20);
    
    buatMakanan(statusGame);
}
void displayGame(dataGame* statusGame) {
    system("cls");
    for (int vertikal = 0; vertikal < lebar + 2; vertikal++) 
        cout << "\033[34m#\033[0m";
    cout << endl;

    for (int vertikal = 0; vertikal < tinggi; vertikal++) {
        for (int horizontal = 0; horizontal < lebar; horizontal++) {
            if (horizontal == 0) cout << "\033[34m#\033[0m";

            if (vertikal == statusGame->kepalaPtr->y && horizontal == statusGame->kepalaPtr->x) {
                cout << "\033[31mO\033[0m";
            }
            else if (vertikal == statusGame->makananPtr->y && horizontal == statusGame->makananPtr->x) {
                cout << "\033[1;33m@\033[0m";
            }
            else {
                bool cetakEkor = false;
                for (int k = 0; k < *statusGame->jumlahEkorPtr; k++) {
                    if (statusGame->ekorPtr[k].x == horizontal && statusGame->ekorPtr[k].y == vertikal) {
                        cout << "\033[31mo\033[0m";
                        cetakEkor = true;
                        break;
                    }
                } 
                if (!cetakEkor) cout << " ";
            } 
            if (horizontal == lebar - 1) cout << "\033[34m#\033[0m";
        } 
        cout << endl;
    }
    
    for (int vertikal = 0; vertikal < lebar + 2; vertikal++) 
        cout << "\033[34m#\033[0m";
    cout << endl;
    
    cout << "Skor: " << *statusGame->skorPtr << "\n";
    cout << "Kontrol: Panah / WASD | Tekan 'x' untuk keluar\n";
}
void input(dataGame* statusGame) {
    if (_kbhit()) {
        int tombol = ambilTombol();
        switch (tombol) {
            case 72: case 'w': case 'W':
                if (*statusGame->arahPtr != BAWAH) *statusGame->arahPtr = ATAS;
                break;
            case 80: case 's': case 'S':
                if (*statusGame->arahPtr != ATAS) *statusGame->arahPtr = BAWAH;
                break;
            case 75: case 'a': case 'A':
                if (*statusGame->arahPtr != KANAN) *statusGame->arahPtr = KIRI;
                break;
            case 77: case 'd': case 'D':
                if (*statusGame->arahPtr != KIRI) *statusGame->arahPtr = KANAN;
                break;
            case 'x': case 'X':
                *statusGame->selesaiPtr = true;
                cout << "Kamu memilih untuk keluar dari permainan\n";
                break;
        }
    }
}
void gerakUlar(dataGame* statusGame) {
    if (*statusGame->jumlahEkorPtr > 0) {
        for (int i = *statusGame->jumlahEkorPtr - 1; i > 0; i--) {
            Titik* ekorNow = &statusGame->ekorPtr[i];
            Titik* ekorRev = &statusGame->ekorPtr[i - 1];
            ekorNow->salinDari(ekorRev);
        }
        statusGame->ekorPtr[0].salinDari(statusGame->kepalaPtr);
    }
    
    switch (*statusGame->arahPtr) {
        case KIRI: statusGame->kepalaPtr->x--; break;
        case KANAN: statusGame->kepalaPtr->x++; break;
        case ATAS: statusGame->kepalaPtr->y--; break;
        case BAWAH: statusGame->kepalaPtr->y++; break;
        default: break;
    }
    
    if (modeGame == "Normal") {
        if (statusGame->kepalaPtr->x < 0) statusGame->kepalaPtr->x = lebar - 1;
        else if (statusGame->kepalaPtr->x >= lebar) statusGame->kepalaPtr->x = 0;

        if (statusGame->kepalaPtr->y < 0) statusGame->kepalaPtr->y = tinggi - 1;
        else if (statusGame->kepalaPtr->y >= tinggi) statusGame->kepalaPtr->y = 0;
    } 
    else if (modeGame == "Hard") {
        if (statusGame->kepalaPtr->x < 0 || statusGame->kepalaPtr->x >= lebar || 
            statusGame->kepalaPtr->y < 0 || statusGame->kepalaPtr->y >= tinggi) {
            cout << "Yah pusing deh, kamu menabrak dinding\n";
            *statusGame->selesaiPtr = true;
        }
    }
    
    for (int i = 0; i < *statusGame->jumlahEkorPtr; i++) {
        if (statusGame->ekorPtr[i].samaDengan(statusGame->kepalaPtr)) {
            cout << "Yah kasihan deh, kamu menabrak tubuh sendiri\n";
            *statusGame->selesaiPtr = true;
        }
    }
    
    if (statusGame->kepalaPtr->samaDengan(statusGame->makananPtr)) {
        *statusGame->skorPtr += 10;
        Beep(2000, 100);
        if (*statusGame->jumlahEkorPtr < ekorMaks) (*statusGame->jumlahEkorPtr)++;
        buatMakanan(statusGame);
    }
}
void akhirGame(dataGame* statusGame) {
    int pilihan = 1;
    bool selesaiAkhir = false;
    while (!selesaiAkhir) {
        system("cls");
        garisMenu();
        cout << "\033[1;31m";
        tengah("+  GAME OVER !  +");
        cout << "\033[0m";
        garisMenu();
        tampilkanMenulvl("Skor Akhir: " ,*statusGame->skorPtr,1,0);
        tengah("Woww! Permainan yang keren");
        garisMenu();
        tampilkanMenuteks(" Main Lagi", 1, pilihan);
        tampilkanMenuteks(" Keluar", 2, pilihan);
        garisMenu();

        int tombol = ambilTombol();
        switch (tombol) {
            case 72: case 'w': case 'W': if (pilihan >= 1) pilihan--;if (pilihan == 0) pilihan = 2; break;
            case 80: case 's': case 'S': if (pilihan <= 3) pilihan++;if (pilihan == 3) pilihan = 1; break;
            case 13:
                if (pilihan == 1) {
                    awalGame(statusGame);
                    selesaiAkhir = true;
                } else if (pilihan == 2) {
                    *statusGame->selesaiPtr = true;
                    cout << "Terima kasih sudah bermain!\n\n";
                    selesaiAkhir = true;
                }
                break;
        }
    }
}
