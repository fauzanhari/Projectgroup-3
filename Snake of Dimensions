#include <iostream>
#include <conio.h> // menyediakan fungsi input secara real time. seperti fungsi getch sama kbhit, kbhit ini untuk cek apakah ada tombol yang diklik, jika true getch akan memproses
#include <ctime> // menyediakan fungsi untuk mengambil dan mengelola waktu komputer. time() untuk Mengambil waktu sekarang dalam bentuk angka detik
#include <windows.h> // menyediakan fungsi khusus operasi windows. seperti sleep() untuk jeda sejenak, beep() untuk mengahsilkan efek suara 
using namespace std;

//inisialisasi variabel global
const int lebar = 60;
const int tinggi = 20;
const int ekorMaks = 100;
bool selesai;
int skor=0;
int jedaGame = 500;
string modeGame = "Normal"; // Default mode
int levelGame = 1;          // Default level

enum Arah { DIAM = 0, KIRI, KANAN, ATAS, BAWAH }; //seperti daftar kode (angka) yang diberi nama biar gampang dibaca
Arah arah; // variabel dengan tipe data enumerasi yang cuma bisa berisi salah satu nilai dari enum Arah

// struct itu wadah yang bisa nyimpen banyak data sekaligus, dan tipe datanya bisa berbeda-beda.
struct Titik {
    int x, y; // x menyimpan angka untuk posisi x (koordinat horizontal), dan y menyimpan angka untuk posisi y (koordinat vertikal)
};

Titik kepala, makanan;
Titik ekor[ekorMaks];
int jumlahEkor;

void garisMenu() {
    for (int i = 0; i <= lebar; i++) cout <<"\033[34m" << "=" <<  "\033[0m" ;
    cout << "\n";
}
void ketikTengah(string teks, int lebar) {
    int spasi = (lebar - (int)teks.length()) / 2;
    cout << string(spasi, ' ');
    for (char c : teks) {
        cout << c;
        for (long long i = 0; i < 1000000; i++);
    }
    cout << endl;
}
void tengah(string teks) {
    int spasi = (lebar - teks.length()) / 2; //menghitung jumlah spasi yang harus ditaruh di kiri teks
    cout << string(spasi, ' ') << teks << endl; //biasanya string dengan parameter itu: string(n, c). jadi kita membuat string yang akan mencetak karakter spasi (' ') sebanyak spasi
}
void tampilkanMenu(string teks, int noMenu, int pil){
    for (int i = 0; i <= lebar-10; i++) {
        if (i == (lebar- (int)teks.length())/2) {
            if (pil == noMenu) cout << "\033[35m" << teks << "\033[0m";
            else cout << teks;
        } else {
            cout << " ";
        }
    } cout<< endl;
}
int ambilTombol() {
    int tombol = _getch(); //kalau char a, w, s, d bakalan langsung disimpan
    if (tombol == 0 || tombol == 224) //tanda awal bahwa tombol tersebut extended, yang artinya tombol khusus
        tombol = _getch(); // harus membaca kembali tombol apa yang diinputkan
    return tombol; // mengembalikan nilai tombol ke pemanggil fungsi
}
void logo() {
    system("cls");
    garisMenu();
    cout << "\033[32m" << R"(
   '        /^\/^\
          _|__|  O|     +
 \/     /~     \_/ \
  \____|__________/  \
         \_______      \
                 `\     \    '            \
                   |     |                  \
                  /      /           +        \
    +            /     /                       \\
               /      /                         \ \
              /     /                            \  \ '
       '    /     /             _----_            \   \
           /     /           _-~      ~-_         |   |
          (      (        _-~    _--_    ~-_     _/   |
           \      ~-____-~    _-~    ~-_    ~-_-~    /    +
    +       ~-_           _-~          ~-_       _-~
                ~--______-~                ~-___-~
    )" << "\033[0m" << endl;
    ketikTengah("+  SNAKE OF DIMENSIONS  +", lebar);
    garisMenu();
}
void mulai() {
    int pilihan = 1;
    bool selesaiMenu = false;
    while (!selesaiMenu) {
        system("cls");
        logo();
        garisMenu();
        cout << endl;
        tampilkanMenu(" Mode Game: " + modeGame, 1, pilihan);
        tampilkanMenu(" Level Game: " + to_string(levelGame), 2, pilihan);
        tampilkanMenu(" Mulai Game", 3, pilihan);
        tampilkanMenu(" Petunjuk Permainan", 4, pilihan);
        tampilkanMenu(" Keluar", 5, pilihan);
        cout << endl;
        garisMenu();

        int tombol = ambilTombol();
        switch (tombol) {
        case 72: case 'w': case 'W': if (pilihan > 1) pilihan--; break;
        case 80: case 's': case 'S': if (pilihan < 5) pilihan++; break;
        case 75:
            if (pilihan == 1)
                modeGame = (modeGame == "Normal") ? "Hard" : "Normal";
            else if (pilihan == 2 && levelGame > 1)
                levelGame--;
            break;
        case 77:
            if (pilihan == 1)
                modeGame = (modeGame == "Normal") ? "Hard" : "Normal";
            else if (pilihan == 2 && levelGame < 10)
                levelGame++;
            break;
        case 13:
            if (pilihan == 3) selesaiMenu = true;
            else if (pilihan == 4) {
                system("cls");
                garisMenu();
                ketikTengah("Petunjuk Permainan", lebar);
                garisMenu();
                cout << "\n  - Gunakan panah atau WASD untuk menggerakkan ular.\n";
                cout << "  - Makan makanan (@) untuk menambah skor dan panjang tubuh ular.\n";
                cout << "  - Hindari menabrak tubuh sendiri.\n";
                cout << "  - klik tombol panah kanan untuk mengubah mode dan level.\n";
                cout << "  - Semakin tinggi level, semakin cepat pergerakan ular.\n";
                cout << "  - Mode Hard tidak boleh menabrak dinding.\n";
                cout << "\n  Tekan tombol apa saja untuk kembali...";
                _getch();
            } else if (pilihan == 5) {
                selesai = true;
                selesaiMenu = true;
            }
            break;
        }
    }
}
void buatMakanan() { // mencetak posisi makanan secara acak, tapi ga boleh di atas kepala ular dan di badan ular
    bool valid;
    do {
        valid = true; // rand() menghasilkan angka acak (random number), biasanya angka bulat positif besar makanya perlu modulo
        makanan.x = rand() % lebar; //menentukan posisi secara acak terlebih dahulu
        makanan.y = rand() % tinggi;
        // cek kondisi posisi
        if (makanan.x == kepala.x && makanan.y == kepala.y) valid = false; 
        for (int i = 0; i < jumlahEkor; i++) {
            if (ekor[i].x == makanan.x && ekor[i].y == makanan.y) {
                valid = false;
                break;
            }
        }
    } while (!valid);
}
void awalGame() {
    selesai = false;
    arah = KANAN;
    kepala.x = lebar / 2;
    kepala.y = tinggi / 2;
    jumlahEkor = 0;
    skor = 0;
    //sesuaikan jeda game berdasarkan mode
    if (modeGame == "Hard") {
        jedaGame = 130; //mode Hard
    } else {
        jedaGame = 200; // Mode Normal
    }
    // Sesuaikan jeda game berdasarkan level
    jedaGame -= (levelGame * 20); // Kecepatan ular meningkat dengan level
    buatMakanan();
}
void displayGame() {
    system("cls");
    for (int vertikal = 0; vertikal < lebar + 2; vertikal++) 
    cout << "\033[34m#\033[0m";
    cout << endl;

    for (int vertikal = 0; vertikal < tinggi; vertikal++) {
        for (int horizontal = 0; horizontal < lebar; horizontal++) {
            if (horizontal == 0) cout << "\033[34m#\033[0m"; // dinding kiri biru

            if (vertikal == kepala.y && horizontal == kepala.x) {
                cout << "\033[31mO\033[0m"; // kepala ular merah
            }
            else if (vertikal == makanan.y && horizontal == makanan.x) {
              cout << "\033[1;33m@\033[0m"; // makanan oranye (kuning tebal)
            }
            else {
                bool cetakEkor = false;
                for (int k = 0; k < jumlahEkor; k++) {
                    if (ekor[k].x == horizontal && ekor[k].y == vertikal) {
                        cout << "\033[31mo\033[0m"; // ekor ular merah
                        cetakEkor = true;
                        break;
                    }
                } if (!cetakEkor) cout << " ";
            } if (horizontal == lebar - 1) cout << "\033[34m#\033[0m"; // dinding kanan biru
        } cout << endl;
    }
    for (int vertikal = 0; vertikal < lebar + 2; vertikal++) cout << "\033[34m#\033[0m";
    cout << endl;
    cout << "Skor: " << skor << "\n";
    cout << "Kontrol: Panah / WASD | Tekan 'x' untuk keluar\n";
}
void input() {
    if (_kbhit()) {
        int tombol = ambilTombol();
        switch (tombol) {
        case 72: case 'w': case 'W':
            if (arah != BAWAH) arah = ATAS;
            break;
        case 80: case 's': case 'S':
            if (arah != ATAS) arah = BAWAH;
            break;
        case 75: case 'a': case 'A':
            if (arah != KANAN) arah = KIRI;
            break;
        case 77: case 'd': case 'D':
            if (arah != KIRI) arah = KANAN;
            break;
        case 'x': case 'X':
            selesai = true;
            break;
        }
    }
}
void gerakUlar() {
    if (jumlahEkor > 0) {
        for (int i = jumlahEkor - 1; i > 0; i--) {
            Titik* ekorNow = &ekor[i];
            Titik* ekorRev = &ekor[i - 1];
            *ekorNow = *ekorRev;
        }
        ekor[0] = kepala;
    }
    switch (arah) {
    case KIRI: kepala.x--; break;
    case KANAN: kepala.x++; break;
    case ATAS: kepala.y--; break;
    case BAWAH: kepala.y++; break;
    default: break;
    }
    if (modeGame == "Normal") {
        // Ular dapat menembus tembok (looping posisi)
        if (kepala.x < 0) kepala.x = lebar - 1;
        else if (kepala.x >= lebar) kepala.x = 0;

        if (kepala.y < 0) kepala.y = tinggi - 1;
        else if (kepala.y >= tinggi) kepala.y = 0;
    } else if (modeGame == "Hard") {
        // Ular akan game over jika menabrak tembok
        if (kepala.x < 0 || kepala.x >= lebar || kepala.y < 0 || kepala.y >= tinggi) {
            cout << "Yah pusing deh, kamu menabrak dinding\n";
            selesai = true;
        }
    }
    // Cek tabrakan dengan ekor
        for (int i = 0; i < jumlahEkor; i++) {
            if (ekor[i].x == kepala.x && ekor[i].y == kepala.y){
            cout << "Yah kasihan deh, kamu menabrak ekor sendiri\n";
            selesai = true;
           }
        }
    // Cek jika kepala makan makanan
    if (kepala.x == makanan.x && kepala.y == makanan.y) {
        skor += 10;
        Beep(1000, 100);
        if (jumlahEkor < ekorMaks) jumlahEkor++;
        buatMakanan();  
    }
}
void akhirGame() {
    cout << "coba lagi nanti yaa, lihat skormu setelah ini \n";
    system("pause");
    system("cls");
    garisMenu();
    cout << "\n\n";
    tengah(" +     GAME OVER :)    + ");
    tengah("Skor Akhir Anda : " + to_string(skor));
    tengah("Terima kasih sudah bermain!\n\n");
    garisMenu();
    cout << "\nTekan tombol apa saja untuk keluar...";
    _getch();
}
int main() { 
    mulai();
    _getch();
    if (selesai) return 0; // Jika keluar dari menu
    awalGame();
    while (!selesai) {
        displayGame();
        input();
        gerakUlar();
        Sleep(jedaGame);
    }
    akhirGame();
    return 0;
}

